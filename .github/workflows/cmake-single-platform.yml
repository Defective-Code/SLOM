# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  test:
    runs-on: windows-latest

    steps:
    - name: Run Tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    
    - name: Setup OpenCppCoverage and add to PATh
      run: |
        choco install OpenCppCoverage -y
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

    - name: Generate CodeCov Report
      working-directory: ${{github.workspace}}/build
      shell: cmd
      run: OpenCppCoverage.exe --modules Release --export_type cobertura:slom.xml -- ctest -C ${{env.BUILD_TYPE}} 
    
    - name: Upload Report to Codecov
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: true
        files: ${{github.workspace}}/build/slom.xml
        token: ${{ secrets.CODECOV_TOKEN }}

      
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Doxygen
      run: choco install doxygen.install
      #run: sudo apt-get install doxygen

    - name: Generate Doxygen
      run: Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1; refreshenv; doxygen Doxyfile #the first two steps are need so that the terminal 

    - name: Setup Pages
      uses: actions/configure-pages@v5
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Upload entire repository
        path: 'documentation/html'
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

